name: getx_sample

packages:
  - lib/utils/annotations/**
  - lib/utils/generators/**

command:
  bootstrap:
    # NOTE: https://github.com/invertase/melos/issues/117#issuecomment-1125224468
    # A workaround is to run melos clean before melos publish,
    # which removes pubspec_overrides.yamls if they were generated by Melos.
    usePubspecOverrides: true

scripts:
  genAlls:
    run: bash ./scripts/generate_all.sh
    description: generate freezed models, images, colors, locales.

  genImages:
    run: bash ./scripts/fluttergen.sh
    description: use the flutter gen to generate assets(images, colors,...).

  genColors:
    run: bash ./scripts/gen_colors.sh
    description: use the flutter gen to generate assets(images, colors,...).

  genLocales:
    run: bash ./scripts/generate_locales.sh
    description: generate locales.

  build_runner:
    run: bash ./scripts/build_runner.sh
    description: build freezed models.

  fluttergen:
    run: bash ./scripts/fluttergen.sh
    description: generate assets(images, colors,...).

  clean:
    run: bash ./scripts/clean.sh
    description: flutter clean for main project.

  pubGet:
    run: bash ./scripts/pub_get.sh
    description: pub get for main project.

  cleanPackage:
    run: |
      melos exec -- fvm flutter clean
    select-package:
      dir-exists: lib
    description: flutter clean for each package.

  pubGetPackage:
    run: |
      melos exec -- fvm flutter pub get
    select-package:
      dir-exists: lib
    description: pub get for each package.

  analyze: dart analyze

  format: bash ./scripts/dartfmt.sh

  unit:test:
    run: melos exec -- dart test
    select-package:
      dir-exists: test

  unchangeGitModules: bash ./scripts/git/unchangeGitModules.sh

  fvmUse:
    run: |
      melos exec \
      -- fvm use 3.3.9
    description: sync the Flutter SDK version for all modules.

  gitInitModularRemotes:
    run: |
      melos exec \
      -- git remote-init
    description: add the modular remote to each module.

  gitStatus:
    run: |
      melos exec \
      -- git status
    description: check the project status for each module.

  addSSHKey: bash ./scripts/add_ssh_key_to_keychain.sh

  testWithCoverage:
    run: bash ./scripts/testWithCoverage.sh
    description: install lcov and convert the lcov.info file to HTML pages.

  combineTestCoverages: bash ./scripts/combine_coverage.sh

  install_lcov:
    run: |
      melos exec -- brew install lcov
    description: install lcov and convert the lcov.info file to HTML pages.

  lcovToHtmls:
    run: bash ./scripts/lcovToHtmls.sh
    description: convert the lcov.info file to HTML pages.

  createNativeSplash:
    run: bash ./scripts/create_native_splash.sh
    description: create native splash screen with configuration from the flutter_native_splash.yaml file.

  installTools:
    run: bash ./scripts/install_tools.sh
    description: install some necessary tools such as fvm, flutter_gen, get_cli.

  installGitTools:
    run: bash ./scripts/install_git_tools.sh
    description: install git tools such as git-remote, git-quick-stats.

  setNanoEditorForGit:
    run: bash ./scripts/set_nano_editor_for_git.sh
    description: setup global editor for git is Nano.

  # Additional cleanup lifecycle script, executed when `melos clean` is run.
  postclean: >
    melos exec -c 6 -- "flutter clean"

  add-header-ignore-flags:
    # If you add here another --ignore flag, add it also to
    # "add-license-header" and "check-license-header".
    run: |
      addlicense -f ignore_flags.txt \
        --ignore ".dart_tool/**" \
        --ignore "build/**" \
        --ignore "android/**" \
        --ignore "ios/**" \
        --ignore "test/**" \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.gen.dart" \
        --ignore "**/*.freezed.dart" \
        --ignore "**/*.tailor.dart" \
        --ignore "**/*.mocks.dart" \
        --ignore "**/generated/**" \
        --ignore "**/*_controller.dart" \
        --ignore "**/*_repository_impl.dart" \
        --ignore "**/*_repository.dart" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        .
    description: |
      Add header ignore_flags.txt to all necessary files.
       - Requires: Run this one before header license adding.

  add-license-header:
    # If you add here another --ignore flag, add it also to
    # "check-license-header" and "add-header-ignore-flags".
    run: |
      addlicense -f header_template.txt \
        --ignore ".dart_tool/**" \
        --ignore "build/**" \
        --ignore "android/**" \
        --ignore "ios/**" \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.gen.dart" \
        --ignore "**/*.freezed.dart" \
        --ignore "**/*.tailor.dart" \
        --ignore "**/*.mocks.dart" \
        --ignore "**/generated/**" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        .
    description: |
      Add a license header to all necessary files.
       - Requires: Run add-header-ignore-flags to add necessary ignore flags first.

  check-license-header:
    # If you add here another --ignore flag, add it also to
    # "add-license-header" and "add-header-ignore-flags".
    run: |
      addlicense -f header_template.txt \
        --check \
        --ignore ".dart_tool/**" \
        --ignore "build/**" \
        --ignore "android/**" \
        --ignore "ios/**" \
        --ignore "test/**" \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.gen.dart" \
        --ignore "**/*.freezed.dart" \
        --ignore "**/*.tailor.dart" \
        --ignore "**/*.mocks.dart" \
        --ignore "**/generated/**" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        .
    description: check the license header in all necessary files.

  clearGitCached: bash ./scripts/clearGitCachedFiles.sh

  gitStats:
    run: bash ./scripts/fileTypeStatistic.sh
    description: File type statistic.

  buildAppBundleRelease:
    run: bash ./scripts/buildAppBundleRelease.sh
    description: build the app bundle release.

  buildAPKRelease:
    run: bash ./scripts/buildAPKRelease.sh
    description: build the APK release.

  androidBetaDistribute:
    run: bash ./scripts/androidBetaDistribute.sh
    description: upload the APK for the beta distribution to the Firebase App Distributions.

  buildIPARelease:
    run: bash ./scripts/buildIPARelease.sh
    description: build the IPA release.

  buildDockerImage:
    run: bash ./scripts/docker_build.sh
    description: build the IPA release.

  runDockerImage:
    run: bash ./scripts/docker_run.sh
    description: build the IPA release.

  buildWebRelease:
    run: bash ./scripts/buildWebRelease.sh
    description: build the IPA release.
